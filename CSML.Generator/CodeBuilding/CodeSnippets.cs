namespace CSML.Generator.CodeBuilding;

internal static class CodeSnippets
{
    public const string VERSION = "dev-1";
    public const string COMPILER_NAME = "CSML.Generator";
    public const string GENERATED_CODE_ATTRIBUTE = $$"""[global::System.CodeDom.Compiler.GeneratedCode("{{COMPILER_NAME}}", "{{VERSION}}")]""";

    public const string CSML_CLASS_INTERFACE_OF_T = "ICSMLClass<T>";
    public const string CSML_CLASS_INTERFACE_OF_T_FULL = $"global::{CSML_LIBRARY_NAMESPACE}.{CSML_CLASS_INTERFACE_OF_T}";

    public const string CSML_LIBRARY_NAMESPACE = "CSML";

    public const string GENERATED_CODE_COMMENT_HEADER = """
        // generated code
                            
        /*********************************************************\
        * Generated by CSML Source Generator created by Dineinger *
        * Auther: https://github.com/Dineinger                    *
        * Repo:https://github.com/Dineinger/CSMLib                *
        \*********************************************************/        
        """;

    public const string BASIC_CODE = $$"""
        {{GENERATED_CODE_COMMENT_HEADER}}
                
        namespace {{CSML_LIBRARY_NAMESPACE}};
        
        {{GENERATED_CODE_ATTRIBUTE}}
        [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
        public sealed class CSMLCodeAttribute<T> : global::System.Attribute
        {
            public CSMLCodeAttribute(string csmlCode)
            {
                CsmlCode = csmlCode;
            }
        
            public string CsmlCode { get; }
        }
        
        {{GENERATED_CODE_ATTRIBUTE}}
        public interface {{CSML_CLASS_INTERFACE_OF_T}}
            where T : {{CSML_CLASS_INTERFACE_OF_T_FULL}}
        {
            static abstract T New();
        }
        
        {{GENERATED_CODE_ATTRIBUTE}}
        public class CSMLTranslator
        {
            public static T From<T>(string csml)
                where T : {{CSML_CLASS_INTERFACE_OF_T_FULL}}
            {
                var result = T.New();
        
                return result;
            }
        }
        """;
}
