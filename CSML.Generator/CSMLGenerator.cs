using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Diagnostics.CodeAnalysis;
using System.Collections.Immutable;
using System.Text;
using System.Text.RegularExpressions;
using CSML.Compiler;
using CSML.Compiler.Syntax;
using System.CodeDom.Compiler;

namespace CSML.Generator;

internal static class CodeSnippets
{
    public const string VERSION = "dev-1";
    public const string COMPILER_NAME = "CSML Compiler";
    public const string GENERATED_CODE_ATTRIBUTE = $$"""[System.CodeDom.Compiler.GeneratedCode("{{COMPILER_NAME}}", "{{VERSION}}")]""";

    public static string CreateBasicCode()
    {
        return $$"""
            // generated code
                                
            /*******************************************************************************
            * Generated by CSML Source Generator created by Dineinger                      *
            * Auther: https://github.com/Dineinger                                         *
            * Repo:https://github.com/Dineinger/CSMLib                                     *
            *******************************************************************************/
            
            using System;
            using System.CodeDom.Compiler;
            
            namespace CSML;
            
            {{GENERATED_CODE_ATTRIBUTE}}
            [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
            public sealed class CSMLAttribute : Attribute
            {
                public CSMLAttribute(string csmlCode)
                {
                    CsmlCode = csmlCode;
                }

                public string CsmlCode { get; }
            }
            
            {{GENERATED_CODE_ATTRIBUTE}}
            public interface ICSMLClass<T>
                where T : ICSMLClass<T>
            {
                static abstract T New();
            }
            
            {{GENERATED_CODE_ATTRIBUTE}}
            public class CSMLTranslator
            {
                public static T From<T>(string csml)
                    where T : ICSMLClass<T>
                {
                    var result = T.New();
            
                    return result;
                }
            }
            """;
    }
}

[Generator]
public class CSMLGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterSourceOutput(context.CompilationProvider,
            static (context, compilation) =>
            {
                context.AddSource("CSMLBasics.generated.cs", CodeSnippets.CreateBasicCode());

                // Analizing C# Code
                var translatorInvocation = CSMLCsharpCodeAnalizer.GetTranslatorInvocations(compilation);
                var csmlInvocationInfo = CSMLCsharpCodeAnalizer.GetInfoFromCSMLRegistration(translatorInvocation);

                // Analizing CSML Code
                var compiler = new CSMLCompiler(context);
                var csmlSyntaxTrees = compiler.GetCompilation(csmlInvocationInfo);

                if (csmlSyntaxTrees is null) {
                    return;
                }

                // Generate Code
                var classesAsTexts = CSMLClassCreator.CreateClasses(csmlSyntaxTrees);
                var classesAsText = String.Join("\n\n", classesAsTexts);

                var finalCode = CSMLClassCreator.CreateFinalCode(classesAsText);
                context.AddSource("CSMLTranslator.generated.cs", finalCode);
            });
    }
}
